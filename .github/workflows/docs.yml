name: Documentation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  validate-markdown-docs:
    name: Validate Markdown Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate markdown structure
        run: |
          echo "## Markdown Documentation Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count markdown files
          MD_COUNT=$(find docs -name "*.md" -type f 2>/dev/null | wc -l || echo "0")
          echo "- Markdown files found: $MD_COUNT" >> $GITHUB_STEP_SUMMARY

          # List main documentation files
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Documentation Files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for file in $(find docs -name "*.md" -type f 2>/dev/null | sort); do
            SIZE=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
            echo "- ✅ \`$file\` (${SIZE} bytes)" >> $GITHUB_STEP_SUMMARY
          done
        continue-on-error: true

      - name: Check for README
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Core Documentation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "README.md" ]; then
            echo "- ✅ README.md exists" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ README.md missing" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "CONTRIBUTING.md" ]; then
            echo "- ✅ CONTRIBUTING.md exists" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "LICENSE" ]; then
            echo "- ✅ LICENSE exists" >> $GITHUB_STEP_SUMMARY
          fi

  check-notebooks:
    name: Validate Documentation Notebooks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jupyter nbconvert nbformat
        continue-on-error: true

      - name: Check notebook syntax
        run: |
          echo "## Notebook Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          NOTEBOOK_COUNT=$(find notebooks examples -name "*.ipynb" -type f 2>/dev/null | wc -l || echo "0")
          echo "- Notebooks found: $NOTEBOOK_COUNT" >> $GITHUB_STEP_SUMMARY

          if [ "$NOTEBOOK_COUNT" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Notebook Files" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            for notebook in $(find notebooks examples -name "*.ipynb" -type f 2>/dev/null); do
              if [ -f "$notebook" ]; then
                echo "- 📓 \`$notebook\`" >> $GITHUB_STEP_SUMMARY
                # Validate JSON structure
                if python -m json.tool "$notebook" > /dev/null 2>&1; then
                  echo "  - ✅ Valid JSON" >> $GITHUB_STEP_SUMMARY
                else
                  echo "  - ⚠️ Invalid JSON" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            done
          fi
        continue-on-error: true

  check-pdfs:
    name: Check PDF Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List PDF files
        run: |
          echo "## PDF Documentation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          PDF_COUNT=$(find docs -name "*.pdf" -type f 2>/dev/null | wc -l || echo "0")
          echo "- PDF files found: $PDF_COUNT" >> $GITHUB_STEP_SUMMARY

          if [ "$PDF_COUNT" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### PDF Files" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            for pdf in $(find docs -name "*.pdf" -type f 2>/dev/null); do
              SIZE=$(stat -c%s "$pdf" 2>/dev/null || stat -f%z "$pdf" 2>/dev/null || echo "0")
              SIZE_MB=$(echo "scale=2; $SIZE / 1048576" | bc 2>/dev/null || echo "0")
              echo "- 📄 \`$pdf\` (${SIZE_MB} MB)" >> $GITHUB_STEP_SUMMARY
            done
          fi

  docs-summary:
    name: Documentation Summary
    runs-on: ubuntu-latest
    needs: [validate-markdown-docs, check-notebooks, check-pdfs]
    if: always()

    steps:
      - name: Create summary
        run: |
          echo "## Documentation Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Markdown Validation: ${{ needs.validate-markdown-docs.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Notebook Validation: ${{ needs.check-notebooks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- PDF Check: ${{ needs.check-pdfs.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Documentation validation complete!" >> $GITHUB_STEP_SUMMARY
