name: Documentation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-sphinx-docs:
    name: Build Sphinx Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy scipy matplotlib
          pip install qutip>=4.7.0
          pip install sphinx>=7.0.0
          pip install sphinx-rtd-theme>=2.0.0
          pip install sphinx-autodoc-typehints>=1.24.0
          pip install myst-parser>=2.0.0
          pip install nbsphinx>=0.9.0
          pip install pandoc
          pip install ipykernel

      - name: Check for Sphinx configuration
        id: check-sphinx
        run: |
          if [ -f "docs/conf.py" ]; then
            echo "sphinx_exists=true" >> $GITHUB_OUTPUT
            echo "✅ Sphinx configuration found"
          else
            echo "sphinx_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ No Sphinx configuration found - will create basic setup"
          fi

      - name: Create basic Sphinx configuration
        if: steps.check-sphinx.outputs.sphinx_exists != 'true'
        run: |
          mkdir -p docs
          cd docs

          # Create conf.py
          cat > conf.py << 'EOF'
          # Configuration file for Sphinx documentation builder
          import os
          import sys
          sys.path.insert(0, os.path.abspath('../src'))

          # Project information
          project = 'QubitPulseOpt'
          copyright = '2024, QubitPulseOpt Team'
          author = 'QubitPulseOpt Team'
          release = '1.0.0'

          # General configuration
          extensions = [
              'sphinx.ext.autodoc',
              'sphinx.ext.napoleon',
              'sphinx.ext.viewcode',
              'sphinx.ext.mathjax',
              'sphinx.ext.intersphinx',
              'sphinx_autodoc_typehints',
              'myst_parser',
              'nbsphinx',
          ]

          templates_path = ['_templates']
          exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

          # HTML output options
          html_theme = 'sphinx_rtd_theme'
          html_static_path = ['_static']
          html_theme_options = {
              'navigation_depth': 4,
              'collapse_navigation': False,
              'display_version': True,
          }

          # Extension configuration
          autodoc_default_options = {
              'members': True,
              'member-order': 'bysource',
              'special-members': '__init__',
              'undoc-members': True,
              'exclude-members': '__weakref__'
          }

          napoleon_google_docstring = True
          napoleon_numpy_docstring = True
          napoleon_include_init_with_doc = True

          # Intersphinx mapping
          intersphinx_mapping = {
              'python': ('https://docs.python.org/3', None),
              'numpy': ('https://numpy.org/doc/stable/', None),
              'scipy': ('https://docs.scipy.org/doc/scipy/', None),
          }

          # MyST parser configuration
          myst_enable_extensions = [
              "colon_fence",
              "deflist",
              "dollarmath",
          ]

          # nbsphinx configuration
          nbsphinx_execute = 'never'  # Don't execute notebooks during build
          nbsphinx_allow_errors = True
          EOF

          # Create index.rst
          cat > index.rst << 'EOF'
          QubitPulseOpt Documentation
          ============================

          Welcome to QubitPulseOpt's documentation!

          QubitPulseOpt is a comprehensive quantum pulse optimization framework implementing
          Krotov's method, randomized benchmarking, and filter function analysis.

          .. toctree::
             :maxdepth: 2
             :caption: Contents:

             installation
             quickstart
             api/modules
             theory
             examples
             contributing

          Indices and tables
          ==================

          * :ref:`genindex`
          * :ref:`modindex`
          * :ref:`search`
          EOF

          # Create basic pages
          cat > installation.rst << 'EOF'
          Installation
          ============

          Basic Installation
          ------------------

          .. code-block:: bash

             pip install numpy scipy matplotlib qutip>=4.7.0

          Development Installation
          ------------------------

          .. code-block:: bash

             git clone https://github.com/yourusername/QubitPulseOpt.git
             cd QubitPulseOpt
             pip install -r requirements-dev.txt
             pre-commit install
          EOF

          cat > quickstart.rst << 'EOF'
          Quick Start
          ===========

          Basic Usage
          -----------

          Here's a simple example to get started with QubitPulseOpt:

          .. code-block:: python

             from src.optimization.krotov_optimizer import KrotovOptimizer
             import numpy as np

             # Initialize optimizer
             optimizer = KrotovOptimizer()

             # Your optimization code here
          EOF

          cat > theory.rst << 'EOF'
          Theory
          ======

          For detailed theoretical background, see the documentation in ``docs/``:

          - Krotov Algorithm Theory
          - Filter Functions Theory
          - Randomized Benchmarking Theory
          - Composite Pulses

          See the markdown documentation files for full details.
          EOF

          cat > examples.rst << 'EOF'
          Examples
          ========

          See the ``examples/`` and ``notebooks/`` directories for:

          - Basic pulse optimization examples
          - Randomized benchmarking demonstrations
          - Filter function analysis
          - Advanced optimization techniques
          EOF

          cat > contributing.rst << 'EOF'
          Contributing
          ============

          See ``CONTRIBUTING.md`` for detailed contribution guidelines.

          Development Setup
          -----------------

          1. Fork the repository
          2. Clone your fork
          3. Install development dependencies
          4. Set up pre-commit hooks
          5. Create a feature branch
          6. Make your changes
          7. Submit a pull request
          EOF

          # Create API documentation structure
          mkdir -p api
          cat > api/modules.rst << 'EOF'
          API Reference
          =============

          .. toctree::
             :maxdepth: 4

             optimization
             benchmarking
             analysis
             gates
             utils
          EOF

          # Create static directory
          mkdir -p _static

      - name: Generate API documentation
        if: steps.check-sphinx.outputs.sphinx_exists != 'true'
        run: |
          cd docs
          # Auto-generate API docs from source code
          sphinx-apidoc -f -o api/ ../src/ --separate

      - name: Build Sphinx documentation
        run: |
          cd docs
          sphinx-build -b html . _build/html -W --keep-going

      - name: Create .nojekyll file
        run: |
          touch docs/_build/html/.nojekyll

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation-html
          path: docs/_build/html/
          retention-days: 90

      - name: Create documentation summary
        run: |
          echo "## 📚 Documentation Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Sphinx documentation built successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Build directory: \`docs/_build/html/\`" >> $GITHUB_STEP_SUMMARY
          echo "- Pages: $(find docs/_build/html -name '*.html' | wc -l) HTML files generated" >> $GITHUB_STEP_SUMMARY

  validate-markdown-docs:
    name: Validate Markdown Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate markdown structure
        run: |
          echo "## Markdown Documentation Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count markdown files
          MD_COUNT=$(find docs -name "*.md" -type f | wc -l)
          echo "- Markdown files found: $MD_COUNT" >> $GITHUB_STEP_SUMMARY

          # List main documentation files
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Documentation Files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for file in $(find docs -name "*.md" -type f | sort); do
            SIZE=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
            echo "- ✅ \`$file\` (${SIZE} bytes)" >> $GITHUB_STEP_SUMMARY
          done

      - name: Check for broken links
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Link Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Simple check for common markdown link patterns
          BROKEN_LINKS=0
          for file in $(find docs -name "*.md" -type f); do
            # Check for obviously broken local links
            if grep -E '\[.*\]\([^h][^t][^t][^p].*\)' "$file" > /dev/null; then
              # Validate local file links exist
              echo "Checking links in $file..."
            fi
          done

          echo "Link validation complete" >> $GITHUB_STEP_SUMMARY

  check-notebooks:
    name: Validate Documentation Notebooks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy scipy matplotlib jupyter nbconvert nbformat
          pip install qutip>=4.7.0

      - name: Check notebook syntax
        run: |
          echo "## Notebook Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          NOTEBOOK_COUNT=$(find notebooks -name "*.ipynb" -type f 2>/dev/null | wc -l)
          echo "- Notebooks found: $NOTEBOOK_COUNT" >> $GITHUB_STEP_SUMMARY

          if [ "$NOTEBOOK_COUNT" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Notebook Files" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            for notebook in notebooks/*.ipynb; do
              if [ -f "$notebook" ]; then
                echo "- 📓 \`$notebook\`" >> $GITHUB_STEP_SUMMARY
                # Validate JSON structure
                python -m json.tool "$notebook" > /dev/null 2>&1 && echo "  - ✅ Valid JSON" >> $GITHUB_STEP_SUMMARY || echo "  - ❌ Invalid JSON" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi

  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-sphinx-docs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v4
        with:
          name: documentation-html
          path: ./docs

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Create deployment summary
        run: |
          echo "## 🚀 Documentation Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Documentation successfully deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- URL: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY

  docs-summary:
    name: Documentation Summary
    runs-on: ubuntu-latest
    needs: [build-sphinx-docs, validate-markdown-docs, check-notebooks]
    if: always()

    steps:
      - name: Create summary
        run: |
          echo "## Documentation Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Sphinx Build: ${{ needs.build-sphinx-docs.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Markdown Validation: ${{ needs.validate-markdown-docs.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Notebook Validation: ${{ needs.check-notebooks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.build-sphinx-docs.result }}" == "failure" ]]; then
            echo "❌ Documentation build failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ Documentation build successful!" >> $GITHUB_STEP_SUMMARY
          fi
