name: Full Test Suite

# Run complete test suite including stochastic tests
# Target: < 30 minutes execution time

on:
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  unit-tests:
    name: Unit Tests (All)
    runs-on: ubuntu-latest
    timeout-minutes: 35

    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-rerunfailures pytest-cov pytest-xdist

    - name: Run unit tests (excluding statistical)
      run: |
        pytest tests/unit/ \
          -m "not statistical" \
          --reruns 2 \
          --reruns-delay 1 \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --tb=short \
          -v \
          --durations=20 \
          -n auto

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-py${{ matrix.python-version }}
        path: |
          .pytest_cache/
          tests/pytest.log
          coverage.xml
        retention-days: 14

  statistical-tests:
    name: Statistical Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    # Only run on schedule or manual trigger to save CI time
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-rerunfailures scipy

    - name: Run statistical tests
      run: |
        pytest tests/unit/test_statistical.py \
          -m "statistical" \
          --reruns 1 \
          --tb=short \
          -v -s \
          --durations=10

    - name: Upload statistical test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: statistical-test-results
        path: |
          .pytest_cache/
          tests/pytest.log
        retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request' || github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-rerunfailures

    - name: Run integration tests
      run: |
        pytest tests/ \
          -m "integration" \
          --reruns 2 \
          --tb=short \
          -v \
          --durations=10

    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: |
          .pytest_cache/
          tests/pytest.log
        retention-days: 14

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, statistical-tests, integration-tests]
    if: always()

    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: test-results/

    - name: Generate test summary
      run: |
        echo "# Test Suite Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Unit Tests**: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Statistical Tests**: ${{ needs.statistical-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration Tests**: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "See uploaded artifacts for detailed results." >> $GITHUB_STEP_SUMMARY
