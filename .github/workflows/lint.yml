name: Linting and Formatting

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black>=24.1.1
          pip install flake8>=7.0.0
          pip install flake8-docstrings>=1.7.0
          pip install flake8-bugbear>=24.1.0
          pip install isort>=5.13.2
          pip install -r requirements-dev.txt

      - name: Check code formatting with Black
        run: |
          echo "## Black Formatting Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if black --check src/ tests/; then
            echo "✅ All files are properly formatted with Black" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some files need Black formatting" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Run \`black src/ tests/\` to fix formatting issues" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Check import ordering with isort
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## isort Import Ordering Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if isort --check-only --diff src/ tests/; then
            echo "✅ All imports are properly ordered" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some imports need reordering" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Run \`isort src/ tests/\` to fix import ordering" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Lint with flake8 (critical errors)
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Flake8 Critical Errors Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Stop the build if there are Python syntax errors or undefined names
          if flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics; then
            echo "✅ No critical syntax errors or undefined names" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Critical errors found - must fix before merging" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Lint with flake8 (all issues)
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Flake8 Full Lint Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run full flake8 check and capture output
          flake8 src/ tests/ --count --max-complexity=15 --max-line-length=100 --statistics --exit-zero > flake8-report.txt 2>&1

          # Display report summary
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -20 flake8-report.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload flake8 report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flake8-report
          path: flake8-report.txt
          retention-days: 30

  mypy:
    name: Type Checking (Optional)
    runs-on: ubuntu-latest
    continue-on-error: true  # Optional - don't fail the build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy>=1.0.0
          pip install types-setuptools
          pip install numpy scipy matplotlib
          pip install qutip>=4.7.0

      - name: Run mypy type checking
        run: |
          echo "## MyPy Type Checking (Optional)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Note: Type checking is currently informational only" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run mypy but don't fail - QuTiP may not have complete type stubs
          mypy src/ --ignore-missing-imports --no-strict-optional --show-error-codes || true

          echo "Type checking complete (see logs for details)" >> $GITHUB_STEP_SUMMARY

  docstring-coverage:
    name: Docstring Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install interrogate
        run: |
          python -m pip install --upgrade pip
          pip install interrogate>=1.5.0

      - name: Check docstring coverage
        run: |
          echo "## Docstring Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Generate docstring coverage report
          interrogate src/ -v --fail-under=0 --generate-badge . > docstring-report.txt || true

          echo '```' >> $GITHUB_STEP_SUMMARY
          cat docstring-report.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload docstring report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docstring-coverage-report
          path: docstring-report.txt
          retention-days: 30

  security:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]>=1.7.0
          pip install safety>=2.0.0

      - name: Run Bandit security linter
        run: |
          echo "## Bandit Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run bandit with medium/high severity issues only
          bandit -r src/ -ll -f json -o bandit-report.json || true

          # Parse and display results
          if [ -f bandit-report.json ]; then
            ISSUES=$(python -c "import json; data=json.load(open('bandit-report.json')); print(len(data.get('results', [])))")
            echo "Security issues found: $ISSUES" >> $GITHUB_STEP_SUMMARY

            if [ "$ISSUES" -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "⚠️ Security issues detected - please review the Bandit report" >> $GITHUB_STEP_SUMMARY
            else
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "✅ No security issues detected" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Check dependencies for known vulnerabilities
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Dependency Security Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Install dependencies
          pip install numpy scipy matplotlib qutip>=4.7.0

          # Check for known vulnerabilities (don't fail on informational)
          safety check --json > safety-report.json || true

          if [ -f safety-report.json ]; then
            echo "Dependency security scan complete" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 90

  lint-summary:
    name: Lint Summary
    runs-on: ubuntu-latest
    needs: [lint, docstring-coverage, security]
    if: always()

    steps:
      - name: Check lint results
        run: |
          echo "## Linting and Formatting Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docstring Coverage: ${{ needs.docstring-coverage.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scanning: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.lint.result }}" == "failure" ]]; then
            echo "❌ Code quality checks failed - review Black, isort, and flake8 results" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ All linting checks passed!" >> $GITHUB_STEP_SUMMARY
          fi
